{
  "author": {
    "name": "Jairaj Sethi",
    "email": "j@jairaj.org",
    "url": "http://jairaj.org/"
  },
  "name": "zerver",
  "description": "a modern webapp server",
  "version": "0.15.4",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/jairajs89/zerver.git"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "mime": "1.2.7",
    "uglify-js": "1.3.4",
    "websocket": "1.0.8"
  },
  "main": "server/zerver.js",
  "bin": {
    "zerver": "server/index.js"
  },
  "scripts": {
    "test": "node test"
  },
  "readme": "Zerver is a lightweight Node.js-based webserver that lets you seamlessly make server API calls as if they were a library on the client. The goal is to provide a developer-focused toolset and remove all the boilerplate involved in serving a webapp.\n\n## Install\n\n```sh\nnpm install -g zerver\n# or add zerver to your package.json dependencies and run npm install\n```\n\n\n\n# Basic usage\n\nLet's say you have a directory of this structure.\n\n```\nwebsite-dir/index.html\nwebsite-dir/zerver/MyAPI.js\n```\n\nEverything in `website-dir` will be served as static content except for code in `zerver/` which will run on the server.\nOnly files on the topmost level of the zerver folder will be saved as api's i.e. files in subfolders under zerver will not be used unless they are specifically required in one of the main api files.\n```js\n// in website-dir/zerver/MyAPI.js\n// this runs on the server\nexports.logStuff = function (str) {\n    console.log(str); // 'hi from client'\n    callback('hi from server');\n};\n```\n\n```html\n<!-- in website-dir/index.html -->\n<!-- this runs in the browser -->\n<script src=\"zerver/MyAPI.js\"></script>\n<script>\n    MyAPI.logStuff('hi from client', function (str) {\n        console.log(str); // \"hi from server\"\n    });\n</script>\n```\n\n```sh\n# run the server\nzerver website-dir\n# go to http://localhost:5000/ to view the magic\n```\n\n### What just happened?\n\n`MyAPI.logStuff` automatically serializes the arguments of the function call and makes an AJAX request to the server. The server runs the function in `website-dir/zerver/MyAPI.js` and responds to the client in a similar way.\n\nAny amount of arguments can be used in the function calls as long as they are JSON stringify-able (with the exception of the callback function).\n\nNote: any server code in a subdirectory of `website-dir/zerver` will not be available for import on the client allowing for libraries of private server functionality.\n\n\n\n# Zerver options\n\n```sh\n# General usage\nzerver [options] website-dir\n\n# run server on a different port\nzerver --port=8000 website-dir\n\n-V, --verbose\n# Verbose logging of requests, including host,\n# protocol, referrer, ip address and user agent\n\n-H, --headers\n# Include request headers in logging\n\n-j, --json\n# Print request logs as JSON (easy to consume by log parsers)\n```\n\n### Default options\n\nYou can specify default options in an environment variable, to avoid having to type them every time or having different setups for different environments in which the code will run:\n```sh\nexport ZERVER_FLAGS='-rc'\n```\n\n## Refresh mode (`-r, --refresh`)\n\n```sh\nzerver -r website-dir\n```\n\nWhen you are developing a webpage in the browser the `-r` flag causes the page to automatically refresh whenever you edit your code. This is a convenient utility that allows for frictionless rapid iteration.\n\nNote: this feature requires that you have included a zerver script somewhere on the webpage and that the browser supports websockets.\n\n## Command line interface (`-c, --cli`)\n\n```sh\nzerver -c website-dir\n```\n\nEnable command line JavaScript access to the browser that your webpage is currently running on. This is extremely usefull when running on a mobile device where it is difficult to debug and access logs. Right from your terminal you'll be able to run commands remotely and see their result as well as see a constant stream of logs from your client.\n\nFor example:\n\n```sh\n> zerver --cli website-dir\n\n# Press <tab> to access remote command line\n>>>\n# The following line logs all the functions that are available in 'MyAPI'\n>>> Object.keys(MyAPI)\n[\"function1\", \"function2\"]\n\n# Logs are automatically streamed here as well\n>>> console.log( Object.keys(MyAPI) )\nlog: [\"function1\", \"function2\"]\nundefined\n# Notice that the log occurred, as well as\n# the 'undefined' return value from the command\n```\n\nNote: this feature requires that you have included a zerver script somewhere on the webpage and that the browser supports websockets.\n\n## Production mode (`-p, --production`)\n\n```sh\nzerver -p website-dir\n```\n\nWhile zerver tries to provide the best developer experience it is built with production environments in mind. Enabling production mode turns on a list of features including:\n\n* in-memory caching of static files\n* auto compiled/minified JavaScript & CSS\n* gzipped output\n* inlined scripts, styles, images\n* concatenated scripts, styles\n* HTML5 appcache manifest management\n\n\n\n### Inline scripts, styles, images\n\nZerver can automatically inline files to reduce the number of requests your app makes and protentially speed things up for your users.\n\n```html\n<link rel=\"stylesheet\" href=\"/css/styles.css?inline=1\">\n<!-- will create a 'style' tag with the inlined css -->\n```\n\n```html\n<script src=\"/js/main.js?inline=1\"></script>\n<!-- will create a 'script' tag with the inlined js -->\n```\n\n```css\n#thing {\n    background-image: url(/img/background.png?inline=1);\n    /* will inline the image as a base64 data URI */\n}\n```\n\n### Concatenate scripts, styles\n\nThe reduce the number of requests your app makes it often makes sense to combine stylesheets or scripts into single files.\n\n```html\n<!-- zerver:css/main.min.css -->\n<link rel=\"stylesheet\" href=\"/css/jquery.ui.css\">\n<link rel=\"stylesheet\" href=\"/css/styles.css\">\n<!-- /zerver -->\n<!-- will create a 'link' tag with href=\"css/main.min.css\" -->\n```\n\n```html\n<!-- zerver:js/main.min.js -->\n<script src=\"js/jquery.js\"></script>\n<script src=\"js/jquery.ui.js\"></script>\n<script src=\"js/main.js\"></script>\n<!-- /zerver -->\n<!-- will create a 'script' tag with src=\"js/main.min.js\" -->\n```\n\nZerver will automatically serve the combined files at the designated URL.\n\n### HTML5 appcache manifest\n\nHTML5 has support for offline apps using [appcache manifests](http://diveintohtml5.info/offline.html). Apps using appcache will update when the manifest itself changes in some way so it is convenient to have the file change whenever there is an update to your client-side code, allowing users to always get the up-to-date version.\n\nZerver will automatically detect these manifest files and insure they update on file changes by appending a comment at the end with the timestamp that the client-side code last changed. This fixes one of the major drawbacks of having to manually manage an appcache manifest.\n\nIf files that are inlined or concatenated are included in the manifest then they should be marked appropriately:\n\n```appcache\nCACHE MANIFEST\n\n/img/background.png?inline=1\n\n# zerver:js/main.min.js\n/js/jquery.js\n/js/jquery.ui.js\n/js/main.js\n# /zerver\n\nNETWORK:\n*\n```\n\n\n\n# Server side\n\n### Custom API calls\n\nZerver allows you server custom API in a more tradional manner:\n\n```js\n/* in zerver/custom.js */\nexports.doSomething = doSomething;\n\ndoSomething.type = 'GET';\nfunction doSomething(params, callback) {\n    callback({ thing: params.stuff });\n}\n```\n\n```sh\n> curl -s \"localhost:5000/zerver/custom/doSomething?stuff=wat\"\n{ \"thing\" : \"wat\" }\n```\n\nIn this case the HTTP status was automaticallys set to 200 and JSON was served.\n\nResponse status code, headers and body can all be set manually as well:\n\n```js\ndoSomething.type = 'GET';\nfunction doSomething(params, callback) {\n    var status = 301;\n    var headers = {\n        'Location': '/zerver/custom/somethingElse'\n    };\n    var body = 'Moved permanently';\n    callback(status, headers, body);\n}\n```\n\nSome API resources make available multiple HTTP methods:\n\n```js\ndoSomething.type = ['GET', 'PUT', 'DELETE'];\nfunction doSomething(params, callback) {\n    if (this.method === 'GET') {\n        // get the resource\n    } else if (this.method === 'PUT') {\n        // update the resource\n    } else if (this.method === 'DELETE') {\n        // delete the resource\n    }\n}\n```\n\nThe 'this' context for API calls is the raw request object. Several additonal properties are added onto the object for convenience:\n\n```js\ndoSomething.type = 'POST';\nfunction doSomething(params, callback) {\n    this.ip        // client IP address\n    this.protocol  // request protocol (http, https)\n    this.host      // the hostname of the request (mysite.com)\n    this.pathname  // the exact resource (/zerver/custom/doSomething)\n    this.query     // a JSON object representation of URL query parameters\n    this.referrer  // the URL that referred the client to this resource\n    this.userAgent // the user agent string of the client\n\n    // for POST and PUT requests\n    this.body      // HTTP body as a string\n    this.jsonBody  // parsed body if HTTP body is JSON\n    this.formBody  // parsed body if HTTP body is form-encoded\n}\n```\n\nSince incoming parameters come in various forms the `params` object serves as a convenient place to access them. The `params` object is a combination of URL query parameters and JSON or form-encoded HTTP body parameters.\n\nReading and setting cookies is simple as well:\n\n```js\ndoSomething.type = 'POST';\nfunction doSomething(params, callback) {\n    var value = this.cookies.get('cookieName');\n    this.cookies.set('cookieName', 'otherValue');\n\n    // robust cookie set\n    this.cookies.set('cookieName', 'otherValue', {\n        maxAge   : 365*24*60*60,\n        expires  : new Date(2020, 8, 13),\n        domain   : 'mysite.com',\n        path     : '/zerver/custom',\n        httpOnly : true,\n        secure   : true,\n    });\n}\n```\n\n### Cross origin requests\n\nEnabling cross origin requests in zerver is a one-liner:\n\n```js\nexports._cors = 'mywebsite.com, myothersite.com';\n```\n\nFor this zerver module all API requests will respond properly to OPTIONS calls as well as serve access control headers when the API calls are made.\n\nTo allow all cross origin requests:\n\n```js\nexports._cors = '*';\n```\n\n\n\n# Client side\n\n### Require syntax\n\n```html\n<!-- in website-dir/index.html -->\n<script src=\"/zerver/require.js\"></script>\n<script>\n    var MyAPI = zerver.require('MyAPI');\n    MyAPI.logStuff('hi from client', function (str) {\n        console.log(str); // \"hi from server\"\n    });\n</script>\n```\n\n### Error handling\n\n```html\n<!-- in website-dir/index.html -->\n<script src=\"zerver/MyAPI.js\"></script>\n<script>\n    MyAPI.logStuff('hi from client', function (str) {\n        // this === MyAPI\n        console.log(str); // \"hi from server\"\n    }).error(function (err) {\n        // this === MyAPI\n        console.log(err); // error string explaining failure\n    });\n</script>\n```\n\n### Custom API calls\n\nZerver's client-side code packs in a convenient interface for making custom API calls.\n\n```js\n/* in website-dir/zerver/custom.js */\nexports.updateData = updateData;\n\nupdateData.type = 'POST';\nfunction updateData(params, callback) {\n    // params.data == { random: 'json' }\n    callback({ success: true });\n}\n```\n\n```html\n<!-- in website-dir/index.html -->\n<script src=\"zerver/require.js\"></script>\n<script>\n    zerver.post('custom/updateData', {\n        data: { random: 'json' }\n    }, function (response, raw, status) {\n        // response.success === true\n        // raw === '{\"success\":true}'\n        // status === 200\n    });\n</script>\n```\n\n`zerver.get`, `zerver.post`, `zerver.put` and `zerver.del` are all defined corresponding to their HTTP methods.\n\nThe second argument of API calls is the data to be passed to the server. This can be a raw string or a JSON object. For `POST` and `PUT` requests the data will be passed in the HTTP body, while all other requests will convert them into query string parameters.\n\nAPI calls can be made to any service (not necessary zerver):\n\n```js\nzerver.get('http://api.mysite.com/data.json', function (response) {\n    // do something with 'response'\n});\n```\n\nIf you're making repeated API calls to another service it's often convenient to not have to include the host prefix:\n\n```js\nzerver.prefix = 'http://api.mysite.com/';\nzerver.get('data.json', function (response) {\n    // do something with 'response'\n});\nzerver.get('otherdata.json', function (response) {\n    // do something with 'response'\n});\n```\n\n\n\n# ExpressJS integration\n\nZerver can be integrated with Express and other NodeJS servers to provide zerver APIs.\n\nHere is an example Express app:\n\n```\nwebsite-dir/app.js\nwebsite-dir/src/index.html\nwebsite-dir/zerver/MyAPI.js\n```\n\n```js\n/* app.js */\n\nvar express = require('express');\nvar zerver  = require('zerver');\n\nvar app = express();\napp.use( zerver.middleware(__dirname) );\napp.use( express.static(__dirname + '/src') );\napp.listen(3000);\n```\n\nAlong with the rest of the Express app, zerver scripts will be accessible for importing into the client-side code.\n\n\n\n# Example apps\n\n[Basic app](https://github.com/jairajs89/zerver/tree/master/examples/basic-app)\n\n[Express app](https://github.com/jairajs89/zerver/tree/master/examples/express-app)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jairajs89/zerver/issues"
  },
  "homepage": "https://github.com/jairajs89/zerver",
  "_id": "zerver@0.15.4",
  "_from": "zerver@"
}
